FORMAT: 1A
HOST: https://polls.apiblueprint.org/

# Image Annotator

Image Annotator is a RESTful API for collecting and annotating public images and private photographs to SQLite database. 

Image Annotator API is designed to be used as a part of scientific hate speech study analysis whereas the aim is collect and annotate of social media images which include text for example memes. Image Annotator API includes also private part which is designed for collecting and annotating private photographs.

Images and photographs create collections which include image or photo related metadata and user identity to identify the owner of the images and photos. Image and photo annotations include image or photo specific annotations created by registered user. Accordingly, annotations are collected to Image Annotation and Photo Annotation Collections. Users need to be registered, and registered users are collected User Collection.



# Group Link Relations

This section describes custom link relations defined in Image Annotator API. 
These are not resources. Custom link relations are CURIEs that use the annometa prefix.
Image Annotator API utilizes defined custom link relations, and [IANA link relations] 
(http://www.iana.org/assignments/link-relations/link-relations.xhtml) where applicable. 


## add-user

The control for adding new user to the API. The control includes a JSON schema and must be accessed with POST.

## add-image

The control for adding new image resource or new resources to the API. The control includes a JSON schema and must be accessed with POST.

## add-photo

The control for adding new photo resource or new resources to the API. The control includes a JSON schema and must be accessed with POST.

## add-photoannotation

The control for adding new annotation for specified photograph. The control includes a JSON schema and must be accessed with POST.

## add-imageannotation

The control for adding new annotation for specified image. The control includes a JSON schema and must be accessed with POST.

## images-by

Leads to list of images collected by registered user. The control includes a JSON schema and must be accessed with GET.

## photos-by

Leads to list of photographs collected by registered user. The control includes a JSON schema and must be accessed with GET.

## photoannotations-by

Leads to list of photoannotations collected by registered user. The control includes a JSON schema and must be accessed with GET.

## imageannotations-by

Leads to list of imageannotations collected by registered user. The control includes a JSON schema and must be accessed with GET.

## users-all

Leads to list of users that are registered to the API. The control includes a JSON schema and must be accessed with GET.

## photos-all

Leads to list of photographs that are collected to the API. The control includes a JSON schema and must be accessed with GET.

## images-all

Leads to list of images that are collected to the API. The control includes a JSON schema and must be accessed with GET.

## photoannotations-all

Leads to list of photographs that are collected to the API. The control includes a JSON schema and must be accessed with GET.

## imageannotations-all

Leads to list of images that are collected to the API. The control includes a JSON schema and must be accessed with GET.

## delete

The control for deleting the specific resource. Must be accessed with DELETE.





# Group Profiles

This section includes resource profiles which provide semantic descriptions for the attributes of each resource, as well as the list of controls (by link relation) available from that resource.





## User Profile

This Profile define the User related information.

### Description

Registered user can import, annotate, edit and delete images and photographs, and related annotations. 
Logging into API is done by using get method to User resource. 
Access is denied if the correct secret apikey is not found in the header.


### Dependencies
 - none
 
### Related Profile
 - none

### Link relations

This section lists all possible link relations associated with User. 

The following link relations from the annometa namespace are used for:

 * [add-user](reference/link-relations/add-user)
 * [add-photo](reference/link-relations/add-photo)
 * [add-image](reference/link-relations/add-image)
 * [add-photoannotation](reference/link-relations/add-photoannotation)
 * [add-imageannotation](reference/link-relations/add-imageannotation)
 * [photos-by](reference/link-relations/photos-by)
 * [images-by](reference/link-relations/images-by)
 * [photoannotations-by](reference/link-relations/photoannotations-by)
 * [imageannotations-by](reference/link-relations/imageannotations-by)
 * [users-all](reference/link-relations/users-all)
 * [photos-all](reference/link-relations/photos-all)
 * [images-all](reference/link-relations/images-all)
 * [photoannotations-all](reference/link-relations/photoannotations-all)
 * [imageannotations-all](reference/link-relations/imageannotations-all)
 * [delete](reference/link-relations/delete)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * self

### Semantic descriptors
 * **user_name**: STRING. User name of the user that has registered to the API.
 * **user_password**: STRING. Password of the registered user.





## Image Content Profile

Image content profile define the image or photograph related information.

### Description

Registered user can import, delete and edit images and photographs in Image Annotator API.

### Dependencies
 * ISO 8601 (Date and Time format). More info at: http://en.wikipedia.org/wiki/ISO_8601

### Related Profile
 * *User*

### Link relations

This section lists all possible link relations associated with Image Content. 

The following link relations from the annometa namespace are used for:

 * [add-photo](reference/link-relations/add-photo)
 * [add-image](reference/link-relations/add-image)
 * [photos-all](reference/link-relations/photos-all)
 * [images-all](reference/link-relations/images-all)
 * [delete](reference/link-relations/delete)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * self

### Semantic descriptors
 * **data**: BINARY. Binary file of loaded image or photograph.
 * **ascii_data**: STRING. ASCII file of loaded image or photograph.
 * **name**: STRING. Name of the loaded image or photograph file.
 * **publish_date**: DATE (ISO_8601)/NONE. If the device or user have updated or defined the date when image or photograph has been taken or published originally, the date is gathered as metadata. If it does not exist, it will contain None.
 * **location**: STRING. Location of file from where image or photograph file has been loaded to API.
 * **is_private**: BOOLEAN. Defines if loaded file is defined as private photograph (True) or public social media image (False). Default is True (as private photograph).
 * **date**: DATE (ISO_8601). Date and time when the image or photograph has been loaded to API.

 



## Image Annotation Profile

This Profile define the Image Annotation related information.

### Description

Registered user can annotate images for example for scientific social media study purposis. 
Registered user can also add, delete or edit image related annotations. 
Logging in as user is done by using get method to that resource. 
Access is denied if the correct secret apikey is not found in the header.

### Dependencies
 * ISO 8601 (Date and Time format). More info at: http://en.wikipedia.org/wiki/ISO_8601

### Related Profile
 * *User*
 * *ImageContent*

### Link relations

This section lists all possible link relations associated with Image Annotation. 

The following link relations from the annometa namespace are used for:

 * [add-imageannotation](reference/link-relations/add-imageannotation)
 * [delete](reference/link-relations/delete)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * self

### Semantic descriptors
 * **meme_class**: BOOLEAN. Boolean classifier to identify meme images. Classified as True if image is meme. Classified as False if image is not meme.
 * **HS_class**: BOOLEAN. Boolean classifier to identify hate speech images. Classified as True if image is or includes hate speech. Classified as False if image is not or does not include hate speech.
 * **text_class**: BOOLEAN. Boolean classifier to identify images that includes text. Classified as True if image includes text. Classified as False if image does not include text.
 * **polarity_classA**: INTEGER. Positive-neutral-negative polarity classifier for image. Integer can get value 2 or 1 if image is positive, value 0 if image is neutral, and value -1 or -2 if image is negative.
 * **polarity_classB**: INTEGER. Positive-negative polarity strength classifier for image. Integer can get value between 1 to 5 if image is positive, and value between -1 or -5 if image is negative. Image cannot get value 0.
 * **HS_strength**: INTEGER. Negative polarity strength classifier for hate speech images. Integer can get value between -1 to -5 according to how hateful it is defined.
 * **HS_category**: STRING. Hate speech category classifier for hate speech images. Available hate speech (HS) categories are presented below.
 * **text_text**: STRING. Text of image, if image includes text.
 * **text_language**: STRING. Language of the text on image, if image includes text.

 * Hate Speech (HS) categories: national, immigration, foreign, ethnic, religion, opinion, group, politics, health, sexual, socialMedia, socioeconomicStatus, appearance, gender, women, men, work, violence, family, swear, bully, troll, coded, idiom, joke, symbolic, other





## Photo Annotation Profile

This Profile define the Photo Annotation related information.

### Description

Registered user can annotate photographs for example for private use. 
Registered user can also add, delete or edit photo related annotations. 
Logging in as user is done by using get method to that resource. 
Access is denied if the correct secret apikey is not found in the header.

### Dependencies
 * ISO 8601 (Date and Time format). More info at: http://en.wikipedia.org/wiki/ISO_8601

### Related Profile
 * *User*
 * *ImageContent*

### Link relations

This section lists all possible link relations associated with Photo Annotation. 

The following link relations from the annometa namespace are used for:

 * [add-photoannotation](reference/link-relations/add-photoannotation)
 * [delete](reference/link-relations/delete)

The following [IANA RFC5988](http://www.iana.org/assignments/link-relations/link-relations.xhtml) link relations are also used:

 * author
 * collection
 * edit
 * self

### Semantic descriptors

 * **persons_class**: BOOLEAN. Boolean classifier to identify persons in photo. Classified as True if image includes persons. Classified as False if image does not include persons.
 * **slideshow_class**: BOOLEAN. Boolean classifier to identify photos suitable for photo-slide-show. Classified as True if image is suitable for show. Classified as False if image is not suitable for show.
 * **positivity_class**: INTEGER. Neutral-positive polarity classifier for photo. Integer can get a value between 1 and 10 ( 1 - 10 ) according to how good photo is.
 * **text_free_comment**: STRING. The free comment text made by user on the photo.
 * **text_persons**: STRING. Text to identify persons and persons names on photo, if photo includes persons.
 * **text_persons_comment**: STRING. Free comment text about persons on photo, if photo includes persons.





# Group Entry

This group contains the entry point of the API

## Entry Point [/api/]

### Get entry point [GET]

Get the API entry point

+ Request

    + Headers
    
            Accept: application/vnd.mason+json
            
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "annometa": {
                        "name": "/link-relations#"
                    }
                },
                "@controls": {
                    "annometa:photoannotations-all": {
                        "href": "/api/photoannotations-all/"
                    },
                    "annometa:imageannotations-all": {
                        "href": "/api/imageannotations-all/"
                    },
                    "annometa:users-all": {
                        "href": "/api/users-all/"
                    }
                }
            }





# Group Users

All of these resources use the [User Profile](reference/profiles/user-profile). 
In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## Users Collection [/api/users/]

A list of all userss known to the API. 

This collection can be sorted using the sortby query parameter. 
For each user only  ---  user name is included, 
more information can be found by following the `self` relation of each user. 

### List all users [GET]

Get a list of all users known to the API.

+ Relation: users-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "annometa": {
                        "name": "/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/users/"
                    },
                    "annometa:users-all": {
                        "href": "/api/users/",
                        "title": "GET All users"                                                
                    },
                    "annometa:add-user": {
                        "href": "/api/users/",
                        "title": "Add a new user",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user_name": {
                                    "description": "User name",
                                    "type": "string"
                                },
                                "user_password": {
                                    "description": "User password",
                                    "type": "string"
                                }
                            },
                            "required": ["user_name", "user_password"]
                        }
                    }
                },
                "items": [
                    {
                        "user_name": "Merja",
                        "user_password": "pass",
                        "@controls": {
                            "self": {
                                "href": "/api/users/merja/"
                            }, 
                            "profile": {
                                "href": "/profiles/user/"
                            }
                        }
                    }
                ]
            }


### Add user [POST]

Adds a new user. The user representation must be valid against the user schema.

+ Relation: add-user
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "user_name": "Merja",
                "user_password": "pass"
            }

+ Response 201

    + Headers
    
            Location: /api/users/merja/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document 
    that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            ...

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            ...
            




## User [/api/users/{user}/]

This is a single user item by given user using the user's unique name. 
For each user only --- user name is included, 
more information can be found by following the `self` relation of each artist. 

+ Parameters

    + user: merja (string) - user's unique user_name


### User information [GET]

Get the user representation.

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
        
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "annometa": {
                        "name": "/link-relations#"
                    }
                },
                "user_name": "merja",
                "user_password": "pass",
                "@controls": {
                    "self": {
                        "href": "/api/users/merja/"
                    },
                    "annometa:photoannotations-by": {
                        "href": "/api/users/merja/photoannotations/"
                    },
                    "annometa:imageannotations-by": {
                        "href": "/api/users/merja/imageannotations/"
                    },
                    "annometa:photos-by": {
                        "href": "/api/users/merja/photos/"
                    },
                    "annometa:images-by": {
                        "href": "/api/users/merja/images/"
                    },
                    "collection": {
                        "href": "/api/users/",
                        "title": "API entry point to user collection",
                        "method": "GET"
                    },
                    "edit": {
                        "href": "/api/users/merja/",
                        "title": "Edit this user",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user_name": {
                                    "description": "User name",
                                    "type": "string"
                                },
                                "user_password": {
                                    "description": "User password",
                                    "type": "string"
                                }
                            },
                            "required": ["user_name"]
                        }
                    },
                    "annometa:delete": {
                        "href": "/api/users/merja/",
                        "title": "Delete this user",
                        "method": "DELETE"
                    }
                },
                "items": [
                    { 
                        "user_name": "merja",
                        "user_password": "pass",
                        "@controls": {
                            "self": {
                                "href": "/api/users/merja/"
                                },
                                "profile": {
                                    "href": "/profiles/user/"
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an artist that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/users/merja/",
                "@error": {
                    "@message": "User not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

### Edit user information [PUT]

Replace the user's representation with a new one. 
Missing optional fields will be set to null. 
Must validate against the user schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "user_name": "merja",
                "user_password": "pass"
            }
        
+ Response 204


+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            ...

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an artist that doesn't exist.

    + Body
    
            ...
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            ...

### Delete user [DELETE]

Deletes the user.

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            ...


        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            ...





# Group ImageAnnotations

All of these resources use the [User Profile](reference/profiles/imageannotation-profile). 
In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## ImageAnnotation Collection [/api/imageannotations/]

A list of all imageannotations known to the API. 

This collection can be sorted using the sortby query parameter. 
For each imageannotation only  ---  id is included, 
more information can be found by following the `self` relation of each user. 

### List all imageannotations [GET]

Get a list of all imageannotationss known to the API.

+ Relation: imageannotations-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "annometa": {
                        "name": "/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/imageannotations/"
                    },
                    "annometa:imageannotations-all": {
                        "href": "/api/imageannotations/",
                        "title": "GET All imageannotations"                                                
                    },
                    "annometa:add-imageannotation": {
                        "href": "/api/imageannotations/",
                        "title": "Add a new imageannotation",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "ImageAnnotation unique name",
                                    "type": "integer"
                                },
                                "meme_class": {
                                    "description": "ImageAnnotation meme class",
                                    "type": "boolean"
                                },
                                "HS_class": {
                                    "description": "ImageAnnotation HS class",
                                    "type": "boolean"
                                },
                                "text_class": {
                                    "description": "ImageAnnotation text class",
                                    "type": "boolean"
                                },
                                "polarity_classA": {
                                    "description": "ImageAnnotation polarity classA",
                                    "type": "integer"
                                },
                                "polarity_classB": {
                                    "description": "ImageAnnotation polarity classB",
                                    "type": "integer"
                                },
                                "HS_strength": {
                                    "description": "ImageAnnotation HS stregth",
                                    "type": "integer"
                                },
                                "HS_category": {
                                    "description": "ImageAnnotation HS category",
                                    "type": "string"
                                },
                                "text_text": {
                                    "description": "ImageAnnotation image text",
                                    "type": "string"
                                },
                                "text_language": {
                                    "description": "ImageAnnotation image text language",
                                    "type": "string"
                                }
                            },
                            "required": ["id", "HS_class"]
                        }
                    }
                },
                "items": [
                    {
                        "id": 1,
                        "meme_class": True,
                        "HS_class": True,
                        "text_class": True,
                        "polarity_classA": -2,
                        "polarity_classB": -4,
                        "HS_strength": -3,
                        "HS_category": "ethnic, sexual, bully, troll, coded, idiom",
                        "text_text": "PARENTS NAMED HIM MIKA PEOPLE CALL HIM BUBBA TUHNULA",
                        "text_language": "english, finnish",
                        "@controls": {
                            "self": {
                                "href": "/api/imageannotations/1/"
                            }, 
                            "profile": {
                                "href": "/profiles/imageannotation/"
                            }
                        }
                    }
                ]
            }


### Add imageannotation [POST]

Adds a new imageannotation. The imageannotation representation must be valid against the user schema.

+ Relation: add-imageannotation
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": 1,
                "meme_class": True,
                "HS_class": True,
                "text_class": True,
                "polarity_classA": -2,
                "polarity_classB": -4,
                "HS_strength": -3,
                "HS_category": "ethnic, sexual, bully, troll, coded, idiom",
                "text_text": "PARENTS NAMED HIM MIKA PEOPLE CALL HIM BUBBA TUHNULA",
                "text_language": "english, finnish"
            }

+ Response 201

    + Headers
    
            Location: /api/imageannotations/1/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document 
    that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            ...

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            ...
            
            



## ImageAnnotation [/api/imageannotations/{imageannotation}/]

This is a single imageannotation item by given user using the imageannotation's unique id. 
For each imageannotation only --- imageannotation id is included, 
more information can be found by following the `self` relation of each artist. 

+ Parameters

    + imageannotation: 1 (integer) - imageannotation's unique id


### ImageAnnotation information [GET]

Get the imageannotation representation.

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
        
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "annometa": {
                        "name": "/link-relations#"
                    }
                },
                "id": 1,
                "meme_class": True,
                "HS_class": True,
                "text_class": True,
                "polarity_classA": -2,
                "polarity_classB": -4,
                "HS_strength": -3,
                "HS_category": "ethnic, sexual, bully, troll, coded, idiom",
                "text_text": "PARENTS NAMED HIM MIKA PEOPLE CALL HIM BUBBA TUHNULA",
                "text_language": "english, finnish",
                "@controls": {
                    "self": {
                        "href": "/api/imageannotations/1/"
                    },
                    "collection": {
                        "href": "/api/imageannotations/",
                        "title": "API entry point to imageannotation collection",
                        "method": "GET"
                    },
                    "edit": {
                        "href": "/api/imageannotations/1/",
                        "title": "Edit this imageannotation",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "ImageAnnotation unique name",
                                    "type": "integer"
                                },
                                "meme_class": {
                                    "description": "ImageAnnotation meme class",
                                    "type": "boolean"
                                },
                                "HS_class": {
                                    "description": "ImageAnnotation HS class",
                                    "type": "boolean"
                                },
                                "text_class": {
                                    "description": "ImageAnnotation text class",
                                    "type": "boolean"
                                },
                                "polarity_classA": {
                                    "description": "ImageAnnotation polarity classA",
                                    "type": "integer"
                                },
                                "polarity_classB": {
                                    "description": "ImageAnnotation polarity classB",
                                    "type": "integer"
                                },
                                "HS_strength": {
                                    "description": "ImageAnnotation HS stregth",
                                    "type": "integer"
                                },
                                "HS_category": {
                                    "description": "ImageAnnotation HS category",
                                    "type": "string"
                                },
                                "text_text": {
                                    "description": "ImageAnnotation image text",
                                    "type": "string"
                                },
                                "text_language": {
                                    "description": "ImageAnnotation image text language",
                                    "type": "string"
                                }
                            },
                            "required": ["id"]
                        }
                    },
                    "annometa:delete": {
                        "href": "/api/imageannotations/1/",
                        "title": "Delete this imageannotation",
                        "method": "DELETE"
                    }
                },
                "items": [
                    { 
                        "id": 1,
                        "meme_class": True,
                        "HS_class": True,
                        "text_class": True,
                        "polarity_classA": -2,
                        "polarity_classB": -4,
                        "HS_strength": -3,
                        "HS_category": "ethnic, sexual, bully, troll, coded, idiom",
                        "text_text": "PARENTS NAMED HIM MIKA PEOPLE CALL HIM BUBBA TUHNULA",
                        "text_language": "english, finnish",
                        "@controls": {
                            "self": {
                                "href": "/api/imageannotations/1/"
                                },
                                "profile": {
                                    "href": "/profiles/imageannotation/"
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an artist that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/imageannotations/1/",
                "@error": {
                    "@message": "ImageAnnotation not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

            

### Edit ImageAnnotation information [PUT]

Replace the imageannotation's representation with a new one. 
Missing optional fields will be set to null. 
Must validate against the user schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": 1,
                "meme_class": True,
                "HS_class": True,
                "text_class": True,
                "polarity_classA": -2,
                "polarity_classB": -4,
                "HS_strength": -3,
                "HS_category": "ethnic, sexual, bully, troll, coded, idiom",
                "text_text": "PARENTS NAMED HIM MIKA PEOPLE CALL HIM BUBBA TUHNULA",
                "text_language": "english, finnish"
            }
        
+ Response 204


+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            ...

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an artist that doesn't exist.

    + Body
    
            ...
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            ...

### Delete ImageAnnotation [DELETE]

Deletes the imageannotation.

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            ...


        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            ...





# Group PhotoAnnotations

All of these resources use the [User Profile](reference/profiles/photoannotation-profile). 
In error scenarios [Error Profile](reference/profiles/error-profile) is used.

## PhotoAnnotation Collection [/api/photoannotations/]

A list of all photoannotations known to the API. 

This collection can be sorted using the sortby query parameter. 
For each photoannotation only  ---  id is included, 
more information can be found by following the `self` relation of each user. 

### List all PhotoAnnotations [GET]

Get a list of all photoannotations known to the API.

+ Relation: photoannotations-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "annometa": {
                        "name": "/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/photoannotations/"
                    },
                    "annometa:photoannotations-all": {
                        "href": "/api/photoannotations/",
                        "title": "GET All photoannotations"                                                
                    },
                    "annometa:add-photoannotation": {
                        "href": "/api/photoannotations/",
                        "title": "Add a new photoannotation",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Photoannotation unique id",
                                    "type": "integer"
                                },
                                "persons_class": {
                                    "description": "Persons in photo",
                                    "type": "boolean"
                                },
                                "slideshow_class": {
                                    "description": "Suitable for slideshow",
                                    "type": "boolean"
                                },
                                "positivity_class": {
                                    "description": "Photo positivity index",
                                    "type": "integer"
                                },
                                "text_free_comment": {
                                    "description": "Photo's free text comment",
                                    "type": "string"
                                },
                                "text_persons": {
                                    "description": "Person names in photo",
                                    "type": "string"
                                },
                                "text_persons_comment": {
                                    "description": "Free text comment of persons",
                                    "type": "string"
                                }
                            },
                            "required": ["id"]
                        }
                    }
                },
                "items": [
                    {
                        "id": 1,
                        "persons_class": "True",
                        "slideshow_class": "False",
                        "positivity_class": 6,
                        "text_free_comment": "Lomalla Norjassa kesällä 2020",
                        "text_persons": "Hessu Hopo, Iines Ankka",
                        "text_persons_comment": "Hauskat ilmeet kavereilla",
                        "@controls": {
                            "self": {
                                "href": "/api/photoannotations/1/"
                            }, 
                            "profile": {
                                "href": "/profiles/photoannotation/"
                            }
                        }
                    }
                ]
            }


### Add PhotoAnnotation [POST]

Adds a new photoannotation. The photoannotation representation must be valid against the user schema.

+ Relation: add-photoannotation
+ Request (application/json)

    + Headers

            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": 1,
                "persons_class": "True",
                "slideshow_class": "False",
                "positivity_class": 6,
                "text_free_comment": "Lomalla Norjassa kesällä 2020",
                "text_persons": "Hessu Hopo, Iines Ankka",
                "text_persons_comment": "Hauskat ilmeet kavereilla"
            }

+ Response 201

    + Headers
    
            Location: /api/photoannotations/1/

+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document 
    that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            ...

+ Response 415 (application/vnd.mason+json)

    The client did not use the proper content type, or the request body was not valid JSON.

    + Body
        
            ...
            
            
            


## PhotoAnnotation [/api/photoannotations/{photoannotation}/]

This is a single photoannotation item by given user using the photoannotation's unique id. 
For each photoannotation only --- photoannotation id is included, 
more information can be found by following the `self` relation of each artist. 

+ Parameters

    + photoannotation: 1 (integer) - photoannotation's unique id


### PhotoAnnotation information [GET]

Get the photoannotation representation.

+ Relation: self
+ Request

    + Headers
    
            Accept: application/vnd.mason+json
        
+ Response 200 (application/vnd.mason+json)

    + Body
    
            {
                "@namespaces": {
                    "annometa": {
                        "name": "/link-relations#"
                    }
                },
                "id": 1,
                "persons_class": "True",
                "slideshow_class": "False",
                "positivity_class": 6,
                "text_free_comment": "Lomalla Norjassa kesällä 2020",
                "text_persons": "Hessu Hopo, Iines Ankka",
                "text_persons_comment": "Hauskat ilmeet kavereilla",
                "@controls": {
                    "self": {
                        "href": "/api/photoannotations/1/"
                    },
                    "collection": {
                        "href": "/api/photoannotations/",
                        "title": "API entry point to photoannotation collection",
                        "method": "GET"
                    },
                    "edit": {
                        "href": "/api/photoannotations/1/",
                        "title": "Edit this photoannotation",
                        "encoding": "json",
                        "method": "PUT",
                        "schema": {
                            "type": "object",
                            "properties": {
                               "id": {
                                    "description": "Photoannotation unique id",
                                    "type": "integer"
                                },
                                "persons_class": {
                                    "description": "Persons in photo",
                                    "type": "boolean"
                                },
                                "slideshow_class": {
                                    "description": "Suitable for slideshow",
                                    "type": "boolean"
                                },
                                "positivity_class": {
                                    "description": "Photo positivity index",
                                    "type": "integer"
                                },
                                "text_free_comment": {
                                    "description": "Photo's free text comment",
                                    "type": "string"
                                },
                                "text_persons": {
                                    "description": "Person names in photo",
                                    "type": "string"
                                },
                                "text_persons_comment": {
                                    "description": "Free text comment of persons",
                                    "type": "string"
                                }
                            },
                            "required": ["id"]
                        }
                    },
                    "annometa:delete": {
                        "href": "/api/photoannotations/1/",
                        "title": "Delete this photoannotation",
                        "method": "DELETE"
                    }
                },
                "items": [
                    { 
                        "id": 1,
                        "persons_class": "True",
                        "slideshow_class": "False",
                        "positivity_class": 6,
                        "text_free_comment": "Lomalla Norjassa kesällä 2020",
                        "text_persons": "Hessu Hopo, Iines Ankka",
                        "text_persons_comment": "Hauskat ilmeet kavereilla",
                        "@controls": {
                            "self": {
                                "href": "/api/photoannotations/1/"
                                },
                                "profile": {
                                    "href": "/profiles/photoannotation/"
                            }
                        }
                    }
                ]
            }

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an artist that doesn't exist.

    + Body
    
            {
                "resource_url": "/api/photoannotations/1/",
                "@error": {
                    "@message": "PhotoAnnotation not found",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

            

### Edit PhotoAnnotation information [PUT]

Replace the photoannotation's representation with a new one. 
Missing optional fields will be set to null. 
Must validate against the user schema. 

+ Relation: edit
+ Request (application/json)

    + Headers
        
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "id": 1,
                "meme_class": True,
                "HS_class": True,
                "text_class": True,
                "polarity_classA": -2,
                "polarity_classB": -4,
                "HS_strength": -3,
                "HS_category": "ethnic, sexual, bully, troll, coded, idiom",
                "text_text": "PARENTS NAMED HIM MIKA PEOPLE CALL HIM BUBBA TUHNULA",
                "text_language": "english, finnish"
            }
        
+ Response 204


+ Response 400 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            ...

+ Response 404 (application/vnd.mason+json)

    The client is trying to access an artist that doesn't exist.

    + Body
    
            ...
        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            ...

### Delete PhotoAnnotation [DELETE]

Deletes the photoannotation.

+ Relation: delete
+ Request

    + Headers
        
            Accept: application/vnd.mason+json
        
+ Response 204

+ Response 404 (application/vnd.mason+json)

    The client is trying to send a JSON document that doesn't validate against the schema, or has non-existent release date.

    + Body
    
            ...


        
+ Response 415 (application/vnd.mason+json)

    The client sent a request with the wrong content type or the request body was not valid JSON.

    + Body
        
            ...




# Group Images and Photos


## Image Collection [/api/images/]

A list of all images known to the API. 

This collection can be sorted using the sortby query parameter. 
For each images only  ---  id is included, 
more information can be found by following the `self` relation of each user. 

### List all Images [GET]

Get a list of all images known to the API.

+ Relation: images-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "annometa": {
                        "name": "/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/images/"
                    },
                    "annometa:images-all": {
                        "href": "/api/images/",
                        "title": "GET All images"                                                
                    },
                    "annometa:add-imagefolder": {
                        "href": "/api/images/",
                        "title": "Add images from folder",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Images unique id",
                                    "type": "integer"
                                },
                                "is_private": {
                                    "description": "Image is not private",
                                    "type": "boolean"
                                },
                                "folder_name": {
                                    "description": "Folder name which is added",
                                    "type": "string"
                                },
                                "folder_path": {
                                    "description": "Folder path which is added",
                                    "type": "string"
                                }
                            },
                            "required": ["id","is_private","folder_name","folder_path"]
                        }
                    }
                },
                "items": [
                    {
                        "id": 1,
                        "is_private": False,
                        "folder_name": "Summer_2020_hate",
                        "folder_path": "C:\user\images",
                        "@controls": {
                            "self": {
                                "href": "/api/images/1/"
                            }, 
                            "profile": {
                                "href": "/profiles/image/"
                            }
                        }
                    }
                ]
            }



### Add folder of images to Image Annotator API [POST]

Adds a new image folder to the system.

+ Relation: add-imagefolder
+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "is_private": False,
                "folder_name": "Summer_2020_hate",
                "folder_path": "C:\user\images"
            }

+ Response 201

    + Headers
    
            Location: /api/--/folder-path/
            
    + Body
    
            {}
            

+ Response 404 (application/vnd.mason+json)

    The client is trying to add a folder that is empty or does not contain any jpeg images.

    + Body
    
            {
                "resource_url": "/api/--/folder-path/",
                "@error": {
                    "@message": "Folder was empty or did not have jpeg images",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }

            
            


## Photo Collection [/api/photos/]

A list of all photos known to the API. 

This collection can be sorted using the sortby query parameter. 
For each photos only  ---  id is included, 
more information can be found by following the `self` relation of each user. 

### List all Photos [GET]

Get a list of all photos known to the API.

+ Relation: photos-all
+ Request

    + Headers
    
            Accept: application/vnd.mason+json

+ Response 200 (application/vnd.mason+json)
    
    + Body

            {
                "@namespaces": {
                    "annometa": {
                        "name": "/link-relations#"
                    }
                },
                "@controls": {
                    "self": {
                        "href": "/api/photos/"
                    },
                    "annometa:photos-all": {
                        "href": "/api/photos/",
                        "title": "GET All photos"                                                
                    },
                    "annometa:add-photofolder": {
                        "href": "/api/photos/",
                        "title": "Add photos from folder",
                        "encoding": "json",
                        "method": "POST",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Photos unique id",
                                    "type": "integer"
                                },
                                "is_private": {
                                    "description": "Photo is private",
                                    "type": "boolean"
                                },
                                "folder_name": {
                                    "description": "Folder name which is added",
                                    "type": "string"
                                },
                                "folder_path": {
                                    "description": "Folder path which is added",
                                    "type": "string"
                                }
                            },
                            "required": ["id","is_private","folder_name","folder_path"]
                        }
                    }
                },
                "items": [
                    {
                        "id": 1,
                        "is_private": False,
                        "folder_name": "Summer_2020_holiday",
                        "folder_path": "C:\user\photos",
                        "@controls": {
                            "self": {
                                "href": "/api/photos/1/"
                            }, 
                            "profile": {
                                "href": "/profiles/photo/"
                            }
                        }
                    }
                ]
            }



### Add folder of Photos to Image Annotator API [POST]

Adds a new photo folder to the system.

+ Relation: add-photofolder
+ Request (application/json)

    + Headers
    
            Accept: application/vnd.mason+json
        
    + Body
    
            {
                "is_private": True,
                "folder_name": "Summer_2020_holiday",
                "folder_path": "C:\user\photos"
            }

+ Response 201

    + Headers
    
            Location: /api/--/folder-path/
            
    + Body
    
            {}
            

+ Response 404 (application/vnd.mason+json)

    The client is trying to add a folder that is empty or does not contain any jpeg images.

    + Body
    
            {
                "resource_url": "/api/--/folder-path/",
                "@error": {
                    "@message": "Folder was empty or did not have jpeg images",
                    "@messages": [null]
                },
                "@controls": {
                    "profile": {
                        "href": "/profiles/error/"
                    }
                }
            }